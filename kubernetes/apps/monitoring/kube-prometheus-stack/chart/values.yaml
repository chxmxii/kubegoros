# namespace: monitoring
namespaceOverride: monitoring


cleanPrometheusOperatorObjectNames: true

alertmanager:
  enabled: true

  alertmanagerSpec:
    replicas: 2
    useExistingSecret: true
    configSecret: alertmanager-config

  ingress:
    enabled: true

    ingressClassName: nginx

    annotations:
      kubernetes.io/tls-acme: "true"
      cert-manager.io/cluster-issuer: letsencrypt

    hosts:
      - alerts.k8s.coralio.co


    tls:
      - secretName: alerts-coralio-co-tls
        hosts:
          - alerts.k8s.coralio.co

nodeExporter:
  enabled: true

kubelet:
  enabled: true
  serviceMonitor:
    metricRelabelings:
      # Drop high cardinality labels
      - action: labeldrop
        regex: (uid)
      - action: labeldrop
        regex: (id|name)
      - action: drop
        sourceLabels: ["__name__"]
        regex: (rest_client_request_duration_seconds_bucket|rest_client_request_duration_seconds_sum|rest_client_request_duration_seconds_count)
      - action: drop
        sourceLabels: ["__name__"]
        regex: (apiserver|etcd)_request(|_sli|_slo)_duration_seconds_bucket
      - action: drop
        sourceLabels: ["__name__"]
        regex: apiserver_request_body_size_bytes_bucket
      - action: drop
        sourceLabels: ["__name__"]
        regex: apiserver_(response|watch_events)_sizes_bucket
      - action: drop
        sourceLabels: ["__name__"]
        regex: (kubelet_runtime_operations|storage_operation)_duration_seconds_bucket
      - action: drop
        sourceLabels: ["__name__"]
        regex: (apiserver|etcd)_request_total
      - action: drop
        sourceLabels: ["__name__"]
        regex: (etcd|apiserver)_request_duration_seconds_(count|sum)
    probesMetricRelabelings:
      - action: drop
        sourceLabels: ["__name__"]
        regex: prober_probe_duration_seconds_bucket
    cAdvisorMetricRelabelings:
      - action: labeldrop
        regex: (uid)
      - action: labeldrop
        regex: (id|name)
      - action: labeldrop
        regex: (endpoint|instance)

kubeApiServer:
  enabled: true
  serviceMonitor:
    metricRelabelings:
      # Drop high cardinality labels
      - action: drop
        sourceLabels: ["__name__"]
        regex: (apiserver|etcd|rest_client)_request(|_sli|_slo)_duration_seconds_bucket
      - action: drop
        sourceLabels: ["__name__"]
        regex: (apiserver_response_sizes_bucket|apiserver_watch_events_sizes_bucket)
      - action: drop
        sourceLabels: ["__name__"]
        regex: apiserver_request_body_size_bytes_bucket
      - action: drop
        sourceLabels: ["__name__"]
        regex: workqueue_(queue|work)_duration_seconds_bucket
      - action: drop
        sourceLabels: ["__name__"]
        regex: apiserver_admission_controller_admission_duration_seconds_bucket

kubeEtcd:
  enabled: true
  # endpoints:
  #   - 10.254.100.10
  #   - 10.254.100.11
  #   - 10.254.100.15
  serviceMonitor:
    metricRelabelings:
      - action: drop
        sourceLabels: ["__name__"]
        regex: (etcd_request_duration_seconds_bucket)

kubeControllerMnager:
  enabled: true
  # endpoints:
  #   - 10.254.100.10
  #   - 10.254.100.11
  #   - 10.254.100.15

kubeProxy:
  enabled: true
  # endpoints:
  #   - 10.254.100.10
  #   - 10.254.100.11
  #   - 10.254.100.15

kubeScheduler:
  enabled: true
  # endpoints:
  #   - 10.254.100.10
  #   - 10.254.100.11
  #   - 10.254.100.15

defaultRules:
  rules:
    kubeControllerManager: false
    kubeProxy: false
    kubeSchedulerAlerting: false
    kubeSchedulerRecording: false

grafana:
  enabled: true
  replicas: 1

  # admin:
  #   existingSecret: grafana-creds

  # env:
  #   GF_AUTH_GENERIC_OAUTH_API_URL: https://auth.plexmox.com/api/oidc/userinfo
  #   GF_AUTH_GENERIC_OAUTH_AUTH_URL: https://auth.plexmox.com/api/oidc/authorization
  #   GF_AUTH_GENERIC_OAUTH_CLIENT_ID: grafana
  #   GF_AUTH_GENERIC_OAUTH_TOKEN_URL: https://auth.plexmox.com/api/oidc/token
  #   GF_DATABASE_NAME: grafana
  #   GF_DATABASE_HOST: mariadb.mariadb.svc:3306
  #   GF_DATABASE_USER: grafana
  #   GF_DATABASE_SSL_MODE: disable
  #   GF_DATABASE_TYPE: mysql

  # envValueFrom:
  #   GF_DATABASE_PASSWORD:
  #     secretKeyRef:
  #       name: grafana-creds
  #       key: db_password
  #   GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET:
  #     secretKeyRef:
  #       name: grafana-creds
  #       key: client_secret

  # grafana.ini:
  #   server:
  #     root_url: https://grafana.plexmox.com
  #   feature_toggles:
  #     enable: metricsSummary tempoServiceGraph traceToMetrics
  #   auth:
  #     oauth_auto_login: true
  #   auth.basic:
  #     enabled: true
  #   auth.generic_oauth:
  #     enabled: true
  #     name: Authelia
  #     icon: signin
  #     scopes: openid profile email groups
  #     empty_scopes: false
  #     login_attribute_path: preferred_username
  #     groups_attribute_path: groups
  #     name_attribute_path: name
  #     use_pkce: true
  #   auth.generic_oauth.group_mapping:
  #     org_id: 1
  #     role_attribute_path: |
  #       contains(groups[*], 'admin') && 'Admin' || contains(groups[*], 'people') && 'Viewer'
  ingress:  
    enabled: true

    ingressClassName: nginx

    hosts:
      - grafana.k8s.coralio.co
    # hosts: []

    ## Path for grafana ingress
    path: /

    ## TLS configuration for grafana Ingress
    ## Secret must be manually created in the namespace
    ##
    tls:
    - secretName: grafana-tls
      hosts:
      - grafana.k8s.coralio.co

    annotations:
      kubernetes.io/ingress.class: nginx
      kubernetes.io/tls-acme: "true"
      cert-manager.io/cluster-issuer: letsencrypt

  # defaultDashboardsEditable: false


  additionalDataSources:
    # - name: Prometheus
    #   orgId: 1
    #   access: proxy
    #   url: http://thanos-query-frontend.thanos.svc.cluster.local:10902
    #   jsonData:
    #     prometheusType: Thanos
    #     timeInterval: 1m
    #   isDefault: true
    # - name: Loki
    #   ordId: 1
    #   access: proxy
    #   type: loki
    #   url: http://loki-gateway
    #   jsonData:
    #     maxLines: 250
    # - name: Tempo
    #   orgId: 1
    #   access: proxy
    #   type: tempo
    #   url: http://tempo.monitoring.svc:3100

prometheus:
  ingress:
    enabled: true

    ingressClassName: nginx

    annotations:
      kubernetes.io/tls-acme: "true"
      cert-manager.io/cluster-issuer: letsencrypt

    hosts:
      - prometheus.k8s.coralio.co

    tls:
      - secretName: prometheus-tls
        hosts:
          - prometheus.k8s.coralio.co

  # thanosService:
  #   enabled: true
  # thanosServiceMonitor:
  #   enabled: true

  prometheusSpec:
    replicas: 1
    # replicaExternalLabelName: __replica__

    enableRemoteWriteReceiver: true
    scrapeConfigSelectorNilUsesHelmValues: false
    ruleSelectorNilUsesHelmValues: false
    serviceMonitorSelectorNilUsesHelmValues: false
    podMonitorSelectorNilUsesHelmValues: false
    probeSelectorNilUsesHelmValues: false



coreDns:
  enabled: true
  service:
    enabled: true
    port: 9153
    targetPort: 9153

    ipDualStack:
      enabled: false
      ipFamilies: ["IPv6", "IPv4"]
      ipFamilyPolicy: "PreferDualStack"
  serviceMonitor:
    enabled: true